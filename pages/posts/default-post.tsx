import type { GetServerSideProps, NextPage } from 'next';
import Image from 'next/image';
import Head from 'next/head';
import Layout from '../../components/layout';
import useSWR from 'swr';

// define props that will be available
type DefaultPostProps = {
  imageSource: string;
};

/**
 * add generic on type NextPage if page has props.
 * props are generated by "getServerSideProps" function below
 */
const DefaultPost: NextPage<DefaultPostProps> = ({ imageSource }) => {
  return (
    <Layout>
      <Head>
        <title>Default Post</title>
      </Head>
      <h1>Default Post</h1>
      <div>
        <Image
          src={imageSource} // Route of the image file
          height={144} // Desired size with correct aspect ratio
          width={144} // Desired size with correct aspect ratio
          alt="Your Name"
        />
        <Profile />
      </div>
    </Layout>
  );
};

export default DefaultPost;

/**
 * GetServerSideProps is used for fetching data on server side
 * as user requested the page.
 * it must be exported and it can only be exported from a page.
 * 'context' parameter contains request specific parameters
 */
export const getServerSideProps: GetServerSideProps = async (context) => {
  return {
    props: {
      imageSource: '/vercel.svg',
    },
  };
};

// --------------------------------------------
// --------------------------------------------
// --------------------------------------------

// useSWR is used for fetching data on client side
const Profile = (): JSX.Element => {
  // function Profile(): JSX.Element {
  type ProfileData = {
    name: string;
  };

  const fetcher = async (input: string) => {
    return (await fetch(input)).json();
  };

  // fetch data on client side
  const { data, error } = useSWR<ProfileData>('/api/hello', fetcher);

  // API above will be finished in about 3 second
  // but below code won't wait until it's finished
  // this function will be re-rendered when it's finished
  if (error) return <div>failed to load</div>;
  if (!data) {
    // API is still processed
    return <div>loading...</div>;
  }

  return <div>hello {data.name}!</div>;
};
